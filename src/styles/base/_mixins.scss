@mixin fill_screen {
  min-height: 100vh;
  min-width: 100vw;
}

@mixin performy {
  backface-visibility: hidden;
  transform: translateZ(0);
  perspective: 1000;
}

@mixin abs {
  position: absolute;
  top: 0;
  left: 0;
}

@mixin fixed {
  position: fixed;
  top: 0;
  left: 0;
}

@mixin object-fit {
  @include abs;
  z-index: 1;
  width: 100%;
  height: 100%;
  background-size: cover !important;
  transform-origin: center center;
  object-position: 50% 50%;
  object-fit: cover;
  font-family: 'object-fit: contain;object-position: 50% 50%';
}

// Removes all outlines for click and focus on elements
@mixin remove-outline() {
  outline: none;
  outline-color: transparent;
  outline-style: none;
  -webkit-appearance: none;
  &:focus {
    outline: none;
    outline-color: transparent;
    outline-style: none;
    -webkit-appearance: none;
  }
}

// Creation of new hamburger mixin
@mixin famsf-hamburger(
  $color: $black,
  $color-hover: $dark-gray,
  $width: 20px,
  $height: 16px,
  $weight: 2px,
  $bars: 3
) {
  // box-shadow CSS output
  $shadow: ();
  $hover-shadow: ();

  // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
  $spacing: ($height - ($weight * $bars)) / ($bars - 1);

  @if unit($spacing) == 'px' {
    $spacing: floor($spacing);
  }

  @for $i from 2 through $bars - 1 {
    $offset: ($weight + $spacing) * ($i - 1);
    $shadow: append($shadow, 0 $offset 0 $color, comma);
  }

  @for $i from 3 through $bars {
    $offset-y: ($weight + $spacing) * ($i - 1);
    $offset-x: -($width / 3);
    $shadow: append($shadow, $offset-x $offset-y 0 $color, comma);
  }

  // Icon container
  position: relative;
  display: inline-block;
  vertical-align: middle;
  width: $width;
  height: $height;
  cursor: pointer;

  // Icon bars
  &::before,
  &::after {
    transition: background .25s ease-in-out, box-shadow .25s ease-in-out;
    position: absolute;
    top: 0;
    left: 0;
    display: block;
    width: 100%;
    height: $weight;
    content: '';
    background: $color;
  }
  &::after {
    background-color: transparent;
    box-shadow: $shadow;
  }

  // Hover state
  @if $color-hover {
    // Generate CSS
    @for $i from 1 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: 0 $offset 0 $color-hover;
    }

    &[aria-expanded="true"] {
      overflow: visible;

      &::before {
        transform: rotate(45deg);
        top: 10px;
      }

      &::after {
        transform: rotate(-45deg);
        box-shadow: $hover-shadow;
        top: -3px;
        left: -12px;
      }
    }
  }
}

// Responsive property mixin.
@mixin responsive($property, $sm, $md: null, $l: null, $xl: null, $xxl: null) {

  // Set property for small.
  @if variable-exists(sm) and $sm != null {
    #{$property}: $sm;
  }

  // Set property for medium and up.
  @if variable-exists(md) and $md != null {
    @include breakpoint(medium) {
      #{$property}: $md;
    }
  }

  // Set property for large and up.
  @if variable-exists(l) and $l != null {
    @include breakpoint(large) {
      #{$property}: $l;
    }
  }

  // Set property for xlarge and up.
  @if variable-exists(xl) and $xl != null {
    @include breakpoint(xlarge) {
      #{$property}: $xl;
    }
  }

  // Set font size for xxlarge and up.
  @if variable-exists(xxl) and $xxl != null {
    @include breakpoint(xxlarge) {
      #{$property}: $xxl;
    }
  }
}
