{% macro components(context) %}
  {% import _self as inklude %}

  {% macro recurse(context, passthrough) %}
    {% if context is iterable %}
      {% import _self as inklude %}
      {{ inklude.components(context|merge({ passthrough: passthrough })) }}
    {% endif %}
  {% endmacro %}

  {# Current context as single component. #}
  {% if context.template is not empty %}
    {# Populate the passthrough variables. #}
    {% set clean = context.passthrough|default({}) %}
    {# Scrub "template" from the data of the component being included. #}
    {% for key, value in context %}
      {% if key not in excludes|default(['template']) %}
        {% set clean = clean|merge({ (key): value }) %}
      {% endif %}
    {% endfor %}
    {% include context.template with clean only %}

  {# Single component, keyed as "component". #}
  {% elseif context.component is not empty %}
    {{ inklude.recurse(context.component, context.passthrough) }}

  {# Multiple components via "components" key. #}
  {% elseif context.components is not empty %}
    {{ inklude.recurse(context.components, context.passthrough) }}

  {# Multiple components directly in the current context. #}
  {% else %}
    {% for key, component in context %}
      {% if key != 'passthrough' %}
        {{ inklude.recurse(component, context.passthrough) }}
      {% endif %}
    {% endfor %}
  {% endif %}

{% endmacro %}
